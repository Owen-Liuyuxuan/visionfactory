from easydict import EasyDict as edict
import os
import numpy as np

cfg = edict()

## path
def build_path():
    path = edict()
    path.kitti360_path = "/data/KITTI-360"
    path.train_split_file = "/data/KITTI-360/data_2d_semantics/train/2013_05_28_drive_train_frames.txt"
    # path.train_split_file = "/data/KITTI-360/data_2d_semantics/train/overfit.txt"
    # path.val_split_file = "/data/KITTI-360/data_2d_semantics/train/overfit.txt"
    path.val_split_file = "/data/KITTI-360/data_2d_semantics/train/2013_05_28_drive_val_frames.txt"
    path.base_path = "/home/yliuhb/vision_collection/src/learning/FSNet"
    path.project_path = "/home/yliuhb/vision_collection/src/learning/FSNet/workdirs"
    if not os.path.isdir(path.project_path):
        os.mkdir(path.project_path)
    path.project_path = os.path.join(path.project_path, 'unet_test')
    if not os.path.isdir(path.project_path):
        os.mkdir(path.project_path)

    path.log_path = os.path.join(path.project_path, "log")
    if not os.path.isdir(path.log_path):
        os.mkdir(path.log_path)

    path.checkpoint_path = os.path.join(path.project_path, "checkpoint")
    if not os.path.isdir(path.checkpoint_path):
        os.mkdir(path.checkpoint_path)

    path.preprocessed_path = os.path.join(path.project_path, "output")
    if not os.path.isdir(path.preprocessed_path):
        os.mkdir(path.preprocessed_path)

    path.train_imdb_path = os.path.join(path.preprocessed_path, "training")
    if not os.path.isdir(path.train_imdb_path):
        os.mkdir(path.train_imdb_path)

    path.val_imdb_path = os.path.join(path.preprocessed_path, "validation")
    if not os.path.isdir(path.val_imdb_path):
        os.mkdir(path.val_imdb_path)
    return path

cfg.path = build_path()

## trainer
trainer = edict(
    gpu = 0,
    max_epochs = 50,
    disp_iter = 50,
    save_iter = 5,
    test_iter = 80,
    training_hook = edict(
        name='vision_base.pipeline_hooks.train_val_hooks.base_training_hooks.BaseTrainingHook',
        clip_gradients=35.0,
    ),
    evaluate_hook = edict(
        name="vision_base.pipeline_hooks.evaluation_hooks.base_evaluation_hooks.BaseEvaluationHook",
        test_run_hook_cfg=edict(name='vision_base.pipeline_hooks.train_val_hooks.base_validation_hooks.BaseValidationHook'),
        dataset_eval_cfg=edict(
            name='segmentation.kitti360.evaluator.KITTI360Evaluator',
            data_path=cfg.path.kitti360_path,
            split_file=cfg.path.val_split_file,
            result_path = os.path.join(cfg.path.val_imdb_path, 'results'),
        ),
    )
)
cfg.trainer = trainer

## optimizer
optimizer = edict(
    name = 'adam',
    lr        = 1e-4,
    weight_decay = 0,
)
cfg.optimizer = optimizer
## scheduler
scheduler = edict(
    name = 'StepLR',
    step_size = 8
)
cfg.scheduler = scheduler

data = edict(
    batch_size = 4,
    num_workers = 4,
    rgb_shape = (192, 640, 3),
    frame_idxs  = [0, 1, -1],
)

train_dataset = edict(
    name = "vision_base.data.datasets.dataset_utils.ConcatDataset",
    frame_idxs = data.frame_idxs,
    cfg_list = [
        edict(
           name = "segmentation.kitti360.kitti360_dataset.KITTI360SegDataset",
           base_path = cfg.path.kitti360_path,
           split_file = cfg.path.train_split_file,
        )
    ],
)

val_dataset = edict(
    name = "segmentation.kitti360.kitti360_dataset.KITTI360SegDataset",
    base_path = cfg.path.kitti360_path,
    split_file = cfg.path.val_split_file,
)

### Build Augmentation
data.augmentation = edict(
    rgb_mean = np.array([0.485, 0.456, 0.406]),
    rgb_std  = np.array([0.229, 0.224, 0.225]),
    cropSize = (data.rgb_shape[0], data.rgb_shape[1]),
    key_mappings=edict(
        image_keys=['image'],
        gt_image_keys=['gt_image'],
    )
)
augmentation_lib = 'vision_base.data.augmentations.augmentations'
builder_lib = 'vision_base.utils.builder'
train_dataset.augmentation = edict(
    name=f'{builder_lib}.Sequential',
    cfg_list = [
        edict(name=f'{augmentation_lib}.ConvertToFloat'),
        # edict(name='lib.data.augmentations.augmentations.RandomWarpAffine', output_w=data.augmentation.cropSize[1], output_h=data.augmentation.cropSize[0]),
        edict(name=f'{augmentation_lib}.Resize', size=data.augmentation.cropSize,preserve_aspect_ratio=False # this should rewrite the keywords outside 
           ),
        edict(name=f'{builder_lib}.Shuffle', 
              cfg_list=[
                    edict(name=f'{augmentation_lib}.RandomBrightness', distort_prob=1.0),
                    edict(name=f'{augmentation_lib}.RandomContrast', distort_prob=1.0, lower=0.6, upper=1.4),
                    edict(name=f'{builder_lib}.Sequential',
                        cfg_list=[
                            edict(name=f'{augmentation_lib}.ConvertColor', transform='HSV'),
                            edict(name=f'{augmentation_lib}.RandomSaturation', distort_prob=1.0, lower=0.6, upper=1.4),
                            edict(name=f'{augmentation_lib}.ConvertColor', current='HSV', transform='RGB'),
                        ] 
                    )
            ],
        ),
        edict(name=f'{augmentation_lib}.RandomMirror', mirror_prob=0.5),
        edict(name=f'{augmentation_lib}.Normalize', mean=data.augmentation.rgb_mean, stds=data.augmentation.rgb_std),
        edict(name=f'{augmentation_lib}.ConvertToTensor'),
        
    ],
    **data.augmentation.key_mappings # common keywords
)

val_dataset.augmentation = edict(
    name=f'{builder_lib}.Sequential',
    cfg_list=[
            edict(name=f'{augmentation_lib}.ConvertToFloat'),
            edict(name=f'{augmentation_lib}.Resize', size=data.augmentation.cropSize, preserve_aspect_ratio=False),
            edict(name=f'{augmentation_lib}.Normalize', mean=data.augmentation.rgb_mean, stds=data.augmentation.rgb_std),
            edict(name=f'{augmentation_lib}.ConvertToTensor'),
    ],
    **data.augmentation.key_mappings
)
    
cfg.data = data
cfg.train_dataset = train_dataset
cfg.val_dataset = val_dataset

## networks
meta_arch = edict(
    name='segmentation.model.meta_arch.UNetSeg',
    network_cfg = edict(
        output_channel = 45,
        backbone = edict(
            name='vision_base.networks.models.backbone.resnet.resnet',
            depth=34,
            pretrained=True,
            frozen_stages=-1,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            norm_eval=False,
            dilations=(1, 1, 1, 1),
        ),
    )
)



cfg.meta_arch = meta_arch
